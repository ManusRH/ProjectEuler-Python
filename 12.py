"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
import math

# first half times last half will give T fx 6[1,2,3,6] = 1*6 = 6, 2*3 = 6 ... fx  28[1,2,4,7,14,28] = 1*28, 2*14, 4*7
# i.e. [i+1] * [-i] = T

t = 1
k = 2
d = 0

def get_factors(n):
    return sum(2 for i in range(1, round(math.sqrt(n) + 1)) if not n % i)

while d < 500:
    t += k
    k += 1
    d = get_factors(t)
    print(t, d)

print("T(n): " + str(t))
